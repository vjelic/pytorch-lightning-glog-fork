{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "99f64997-2928-35ab-a497-4ff2af25645c",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "164ae27f-342c-3ac1-b960-0f6ef420fd41",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "6dc48d91-aed0-3e8c-b7e8-0bd3fd0e900d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e4d1eb81-d911-3332-ad01-47da2f5d7b66",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "f7e14b9e-3050-38af-a92a-f5e6c65a747d",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "e4b3d8c8-a5d3-3299-ae1b-e09ba6e0f34f",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "1e2ed0b2-032d-3af6-8cdd-44d1bbcbec91",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "cb5d2e43-1d91-3348-834e-9b3a9cda8082",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "28617d71-8776-3ac9-967e-ee188e1fb1a8",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "d5b3270d-2b3a-3285-99a5-2ab7fe7fc7e5",
              "name": "resources.rules.remove-package-cache",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.remove-package-cache"
              },
              "fullDescription": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3009](https://github.com/hadolint/hadolint/wiki/DL3009)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.remove-package-cache"
                ]
              }
            },
            {
              "id": "4db541f2-9391-3a6c-ba6a-763fea9c6516",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "f5dbf0e2-9389-3715-8046-aab5fb1a3b7f",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "2063d2ef-5298-3a14-9485-f83f698873bd",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "aea67bff-a892-3257-9fa3-25473b4d6424",
              "name": "resources.rules.remove-package-cache",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.remove-package-cache"
              },
              "fullDescription": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3009](https://github.com/hadolint/hadolint/wiki/DL3009)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.remove-package-cache"
                ]
              }
            },
            {
              "id": "ef62646e-bc46-384a-9357-9aa9746795e3",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "f2ac36fb-8757-3fdf-bce8-39aea9bcf219",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "bce1c60f-fc7b-370d-9c1c-46ef9379a552",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "d4c66698-0ff5-3676-bb09-ec89fa2ee8cd",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "84b3a775-5cda-3144-9a3d-b16e37424964",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "cdb3ad91-ccda-3c36-a14b-9745a23f78cb",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "4c702646-d40c-3dc3-8087-4c98af625cc0",
              "name": "dockerfile.security.missing-user.missing-user",
              "shortDescription": {
                "text": "Opengrep Finding: dockerfile.security.missing-user.missing-user"
              },
              "fullDescription": {
                "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user",
              "help": {
                "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/dockerfile.security.missing-user.missing-user)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "dockerfile.security.missing-user.missing-user"
                ]
              }
            },
            {
              "id": "d8f03f8a-4358-3439-9aba-5644f9e329b0",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "2c74793b-1ef8-357c-a5e2-395e573fce62",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "de80ecb1-7788-379a-b905-8852a3dfe5f2",
              "name": "resources.rules.missing-user",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-user"
              },
              "fullDescription": {
                "text": "By not specifying a USER, a programs in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "By not specifying a USER, a programs in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By not specifying a USER, a programs in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-user"
                ]
              }
            },
            {
              "id": "ada4c327-53a6-3317-aed5-c3166623048e",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "ec39366e-85f9-3cc9-8a8f-93cfa9e3c634",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "b1d4bd4e-2a68-3b15-9b07-e6dc68b43229",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "007669cf-ec5f-301e-9073-765b18d927d8",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "fc10b302-8f78-371b-b0fa-51fd602cc2d9",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "030d22ad-dee7-3a01-bbf4-3395b96f38c1",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "df9e80f7-d758-3413-9b8b-ffc59b8bd797",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "d32df884-9db9-30f1-b63b-3736fa936a63",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "5bf0b2ec-94a6-3634-aa00-382a49b69750",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "6d0136a6-b931-3bd9-8008-c1f1637032c0",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "f9e473e3-2ad2-351c-932a-dac16a1295a0",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "029bbd1b-7cfe-3041-b103-85a474f78978",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "62da2975-529d-33be-aa45-27492246feb2",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "91f1c427-3bc9-3c8b-ad78-495b107f561f",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "348a56d6-7ebd-3169-8eb1-3b3e1092896d",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "e6634c58-f99a-37f3-8eb7-dfb717e80dae",
              "name": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
              },
              "fullDescription": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "help": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected)\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
                ]
              }
            },
            {
              "id": "664a8fb3-0fad-3ad8-ad20-b417e8bb81f4",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "cf5cefb3-e666-31a0-83e8-933324cf7845",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "ef1f2de3-9a7c-3ac3-b7a1-2fbb0ccf6e22",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "fb418121-881e-3bc3-a1f6-6ab40119fe60",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "d90f4b9f-334a-3fcb-9ba1-08f6a0a533d6",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "95221f90-9765-3f73-a0f1-cb9f94661f4b",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "15eb25c8-0fd0-3da6-8b7e-d354ee46cdc3",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "c1835137-1838-3f25-a822-0f3c8abacda5",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "a86d7a6d-6a1c-3d79-be9c-95d6da3023ee",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "9acd8845-0274-33d1-90bf-99232e0702c4",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "f0e5d174-1d86-37c6-a3d9-606175d44056",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "7ce89cdb-ea5c-3aee-b61d-0787f4353dda",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "c7aadf68-e773-3ca3-baf0-b71c51d55ff9",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "c82b01ca-8d5c-30cc-ab49-e39fa9b847bf",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "8bd1e751-9494-30e3-a900-ad94dc8193fb",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "fa3395a3-347e-37ac-a647-9e8552520609",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "a605370c-984c-3243-9d1c-3de93c0c0934",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "e7add9c0-a596-3ae5-8089-0255aaf1ab6a",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "5a8cbfc4-6fc9-3f42-9f0e-cd8f89508099",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "1ba6e005-3cc3-39ca-a1c4-95f7077697f1",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "0d537aa1-e456-34c3-b41a-b6319cdb3cd9",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "195bcd1c-9a3d-3c0c-8e0e-ebf31bd576fa",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "222577c5-89dc-3d68-8acc-83fb1ff8b0e0",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "bc14ff57-6a25-39b3-96fa-75482379a52c",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "be919ed7-a6e0-3920-8edc-75367a54e473",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "ee0d3b2f-d99b-362a-9668-ec8c05b561de",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "6dbc5473-6049-35a0-b650-5bdd29816f0b",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "9ef953c6-ac3f-3263-bd5b-3c83142c242a",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "7d7caee3-8cc2-3d49-a995-ae3bd818bb12",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "612cc23a-c0fc-33f8-a080-72aa6dece707",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "578030f1-93ad-3023-b88e-ac220c39fa73",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "a92566b9-efcf-3f7d-a22e-9582fd59f47c",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "780802a9-2b91-303b-af0b-c82d0c15cd9e",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "05122bab-9ec4-3167-8e7c-179f69eec547",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "afbffd93-7e51-3776-870a-511e827d3375",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "7783c13f-9dfa-3085-a3d6-c500c8ac76c0",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "9836685b-57f2-3c73-82d6-66622739100e",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "18fdc126-cf0a-3d46-a2da-b9d14981c43f",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "a8fe89de-6eea-3429-a2b0-b4567d8a2b63",
              "name": "resources.rules.identical-is-comparison",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.identical-is-comparison"
              },
              "fullDescription": {
                "text": "Found identical comparison using is. Ensure this is what you intended."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found identical comparison using is. Ensure this is what you intended.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found identical comparison using is. Ensure this is what you intended.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.identical-is-comparison"
                ]
              }
            },
            {
              "id": "a2c46d98-2ce6-31da-94d0-6519f27be587",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "d309a958-73c4-31bc-8e20-9169d0d8e4a2",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "71e98af5-98cb-3aee-9388-95b038e10ad6",
              "name": "python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces"
              },
              "fullDescription": {
                "text": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
              "help": {
                "text": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces"
                ]
              }
            },
            {
              "id": "faf69baf-46c3-3457-a971-97447d21d28c",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "fc0da719-01a5-3778-a798-de4d08666671",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "577635da-1736-3c58-8df2-217260878ea8",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "28532170-e50f-3d3d-a843-b50d2c43cbc5",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "af12f478-9ef4-339b-98b3-3a9c055e86e3",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e51ee14a-272f-3dce-bf6f-72da32150b74",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "4404502e-5575-3692-94d4-badbfd53ad77",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "3cb668b4-68f8-3b0e-ae16-894b23b6597e",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "54676d23-f083-3f9f-abaa-54fb5a4a881a",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f7d4e4d4-9a8a-375d-82f1-ab9f594dc55e",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "082b4ba9-d778-34a3-ac5d-33ebc793d6f4",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "645abee3-f9b2-3e72-ac8d-e5468067f19a",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "d76eaa0b-e88f-313b-b6b7-e5b6d2851e40",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "daebba3f-b0ec-3ad1-95ba-c9cce1a2aae1",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "115dffc9-1e2c-322c-97e5-f913eeffd607",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "0ffed012-fa89-3ac4-9b10-23ecd18728e2",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "43c6995f-da59-312a-ac38-45eeac2d0e45",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "07561ada-30d3-393d-ad99-bac9631a7b4d",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "e4483caf-6ba3-3e73-8ada-dfac23de2f70",
              "name": "resources.rules.insecure-dl-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-dl-use"
              },
              "fullDescription": {
                "text": "The Python 'dl' module may cause segmentation faults or other incorrect behavior"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'dl' module may cause segmentation faults or other incorrect behavior\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'dl' module may cause segmentation faults or other incorrect behavior\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-dl-use"
                ]
              }
            },
            {
              "id": "009c2707-1e3c-30fe-b1b7-3006573c5a66",
              "name": "resources.rules.insecure-dl-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-dl-use"
              },
              "fullDescription": {
                "text": "The Python 'dl' module may cause segmentation faults or other incorrect behavior"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'dl' module may cause segmentation faults or other incorrect behavior\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'dl' module may cause segmentation faults or other incorrect behavior\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-dl-use"
                ]
              }
            },
            {
              "id": "b422c54b-f0e6-34f3-a385-f2e35da0dbea",
              "name": "resources.rules.insecure-dl-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-dl-use"
              },
              "fullDescription": {
                "text": "The Python 'dl' module may cause segmentation faults or other incorrect behavior"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'dl' module may cause segmentation faults or other incorrect behavior\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'dl' module may cause segmentation faults or other incorrect behavior\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-dl-use"
                ]
              }
            },
            {
              "id": "1741b9e4-ed48-303b-a141-ddf801c95ef4",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "3634ad4d-4400-35d6-90e7-52478186cb01",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "dcb8fcfd-a2a2-36d2-af09-9fe3ac59c976",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "79c4b449-0a34-3845-827d-58b85ec380bf",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e84840f8-f75d-36c4-8107-804f25d6f8a0",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "9c314444-f6c0-3882-9b71-890b906e1d94",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "2caf9a9d-2760-3b0c-8ecb-715613a1f910",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "58910806-ea78-3262-b06a-67f24e6a4b9a",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "3b1336c6-da67-3231-92f5-021a4c3c9a44",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "35895350-70b1-3edc-9341-17baef583926",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "01b458f6-2901-333a-ab66-c735bc128ce1",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "534cf967-5f92-3dfb-a9e1-ed4973040667",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "986aca39-bc34-332a-944b-8ba9e01d7eb0",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "6de99c1f-01c5-393a-ab53-238aab6fa07b",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "72478cd5-1ac7-3119-8371-83eea4b3c464",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "ca6aaa26-2386-375f-bdb5-4c933d45eb07",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e32d717a-4ee7-3063-899e-4513306d5605",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "de0c8fc0-e8a4-33aa-af46-6f3d432e8ae0",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "99f64997-2928-35ab-a497-4ff2af25645c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-conda/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 1,
                  "endLine": 140,
                  "endColumn": 23,
                  "snippet": {
                    "text": "RUN \\\n    # install Bagua\n    CUDA_VERSION_MM=$(python -c \"print(''.join('$CUDA_VERSION'.split('.')[:2]))\") && \\\n    pip install \"bagua-cuda$CUDA_VERSION_MM==0.9.0\" && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "15d8947c0d4d2e2fd9294f44b33d5d1dea12238cdb84fdbdb5f97cd3dae38ac49bedd87f6aa7553f778db287d8ad589a67e1df0cba1378f9c0a4948190eab312_0"
          },
          "properties": {}
        },
        {
          "ruleId": "164ae27f-342c-3ac1-b960-0f6ef420fd41",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-conda/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 1,
                  "endLine": 128,
                  "endColumn": 28,
                  "snippet": {
                    "text": "RUN \\\n    CUDA_VERSION_MAJOR=$(python -c \"import torch ; print(torch.version.cuda.split('.')[0])\") && \\\n    py_ver=$(python -c \"print(int('$PYTHON_VERSION'.split('.') >= '3.9'.split('.')))\") && \\\n    # install DALI, needed for examples\n    # todo: waiting for 1.4 - https://github.com/NVIDIA/DALI/issues/3144#issuecomment-877386691\n    if [ $py_ver -eq \"0\" ]; then \\\n        pip install --extra-index-url https://developer.download.nvidia.com/compute/redist \"nvidia-dali-cuda${CUDA_VERSION_MAJOR}0>1.0\" ; \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "532d78da53fc9d3c93a3e7bdc5c89e311d46d018b9ebf15e6c8109d3b02389a0c261158ebe960d7c930a8ebc8ebc378b4b1443ea1180ca452b0ee93db9b3a81d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6dc48d91-aed0-3e8c-b7e8-0bd3fd0e900d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'__version__ = [\\d\\.\\w\\'\"]+'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".actions/assistant.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 16,
                  "endLine": 33,
                  "endColumn": 90,
                  "snippet": {
                    "text": "        init = re.sub(r'__version__ = [\\d\\.\\w\\'\"]+', f'__version__ = \"{now_date}\"', init)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "225d1ba075f1725474e268aa479d291611fb42a9c531752a36d9a9a410960e1af9c425033a56b334728aaefba315a6aa60b44ace721f5035ced7034fe57157ee_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e4d1eb81-d911-3332-ad01-47da2f5d7b66",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-conda/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu20.04"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "63038b854f8f07aa7cfd5944db8010b07abc1f1466de6ac21a20d7756c4392b010ee9164f52ea5e51e030b113a81b96eb88707edf080dc30ec531ff9c6090d40_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f7e14b9e-3050-38af-a92a-f5e6c65a747d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-cuda/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu${UBUNTU_VERSION}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4978fcb4dc6cd1c7276e0e3a2276b2a0a8c789f946e1597f7a542392f59c9395b2881e506175b80189a943bfc168fa6833907be451e00d39b864bacc5782bb5e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e4b3d8c8-a5d3-3299-ae1b-e09ba6e0f34f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-cuda/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 1,
                  "endLine": 98,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN \\\n    apt-get purge -y cmake && \\\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2.tar.gz && \\\n    tar -zxvf cmake-3.20.2.tar.gz && \\\n    cd cmake-3.20.2 && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "65373287d7fc79c49535f833b4f3f8e3d2ee2e9b9cd6d7e22faeac017c36c69f4b0a02b045600641969089bbfd2ed3a2b6cafc9ac412e7e5a794f7359f332f3d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1e2ed0b2-032d-3af6-8cdd-44d1bbcbec91",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-cuda/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 1,
                  "endLine": 143,
                  "endColumn": 23,
                  "snippet": {
                    "text": "RUN \\\n    # install Bagua\n    CUDA_VERSION_MM=$(python -c \"print(''.join('$CUDA_VERSION'.split('.')[:2]))\") && \\\n    pip install \"bagua-cuda$CUDA_VERSION_MM==0.9.0\" && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5a6377dd4902da87a3b54d2962032601e0295321036f7e54821ede1241e6de4564f4c6c35eaf813bf6ec1c596bb8ce1444d77b8148de257cf701d2bff8476fad_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cb5d2e43-1d91-3348-834e-9b3a9cda8082",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-cuda/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 129,
                  "endColumn": 28,
                  "snippet": {
                    "text": "RUN \\\n    CUDA_VERSION_MAJOR=$(python -c \"import torch; print(torch.version.cuda.split('.')[0])\") && \\\n    py_ver=$(python -c \"print(int('$PYTHON_VERSION'.split('.') >= '3.9'.split('.')))\") && \\\n    # install DALI, needed for examples\n    # todo: waiting for 1.4 - https://github.com/NVIDIA/DALI/issues/3144#issuecomment-877386691\n    if [ $py_ver -eq \"0\" ]; then \\\n        pip install --extra-index-url https://developer.download.nvidia.com/compute/redist \"nvidia-dali-cuda${CUDA_VERSION_MAJOR}0>1.0\" ; \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "31f927804dcfc97bb61047f04165387dfe8b8fdd23d7486efc4e147a55833abec8a6d2b6589be7cf5513d382b366443768bf8c15275a964bbd2b421f5b8ed59c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "28617d71-8776-3ac9-967e-ee188e1fb1a8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-rocm/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 10,
                  "snippet": {
                    "text": "FROM rocm/pytorch:latest"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "181cbea6f948fffb9b75df3947f3467a34ffa47cd116cddd88cf272721a893a6540bd5d1a12d0fb60789815e39e8d24ef62578ad6d622145f7bb239f84d65233_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d5b3270d-2b3a-3285-99a5-2ab7fe7fc7e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-ipu/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN apt-get update -qq && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "78e30a03e6e096c985522440e3409fba88cab256501a3fb352ee9baab19885244819b292b1cb41822e75aff1d2b8aa7b215ac9e69fbbc4a424063e6f0bea2efe_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4db541f2-9391-3a6c-ba6a-763fea9c6516",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-rocm/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN \\\n    apt-get purge -y cmake && \\\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2.tar.gz && \\\n    tar -zxvf cmake-3.20.2.tar.gz && \\\n    cd cmake-3.20.2 && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6a5d0a890259448a5a40137737613068f62911f44ffafc70bb697847a8226a407f82af750b1bb43acf4f963b990a820bc1885e70820a93234bf97e91faed0955_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f5dbf0e2-9389-3715-8046-aab5fb1a3b7f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-xla/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM google/cloud-sdk:slim"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "14e0a5952e1636eed726609b8c3eb116acf25fb06faed87fd7d95fbe15370e10d8433568497fbe18cae390be090689bb889f51b2edf0dfaf6410b98ace0c829c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2063d2ef-5298-3a14-9485-f83f698873bd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-xla/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 22,
                  "snippet": {
                    "text": "RUN pip --version && \\\n    pip config set global.cache-dir false && \\\n    conda remove pytorch torchvision && \\\n    # Install Pytorch XLA\n    py_version=${PYTHON_VERSION/./} && \\\n    gsutil cp \"gs://tpu-pytorch/wheels/torch-${XLA_VERSION}-cp${py_version}-cp${py_version}m-linux_x86_64.whl\" . && \\\n    gsutil cp \"gs://tpu-pytorch/wheels/torch_xla-${XLA_VERSION}-cp${py_version}-cp${py_version}m-linux_x86_64.whl\" . && \\\n    gsutil cp \"gs://tpu-pytorch/wheels/torchvision-${XLA_VERSION}-cp${py_version}-cp${py_version}m-linux_x86_64.whl\" . && \\\n    pip install *.whl && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "53f8b9fd8da3b95c8984e92a76b5b170e6533849748d3cfcb2c0e95110c087ee1fabccee2c8f1dd535f250c41704195b855da56f6e54fcf73241068967caf148_0"
          },
          "properties": {}
        },
        {
          "ruleId": "aea67bff-a892-3257-9fa3-25473b4d6424",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-xla/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN apt-get update -qq && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ed2fbfaabc7aeb85fcafbc3e5bf1752b07d59fd74fb89175c7e306abe6fc3e0d9ed5175f284514e62b1355ba5dba75d90b0d1fa10eb17155be9e368b9ab180e1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ef62646e-bc46-384a-9357-9aa9746795e3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/base-xla/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 1,
                  "endLine": 93,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN \\\n    python --version && \\\n    cd pytorch-lightning && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a4e31a1c84a88cb31ef7b43c5d37a3d31c506b730764f7d8331ca10cae44a26be6721aeeec39b41bd2a4266e241bb73abf2c38f948382dc7ed615a1975ad7093_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f2ac36fb-8757-3fdf-bce8-39aea9bcf219",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/for_rocm/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 10,
                  "snippet": {
                    "text": "FROM rocm/pytorch:latest"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "58c62ebdc3d15643cbb1892a2b971ffa3e42be266a0048f5e75ba8d852e56c19d24b3b771713078c5f338d68900cc12e3ef001cfee3b5fc4dc2354db4d79725a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bce1c60f-fc7b-370d-9c1c-46ef9379a552",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/for_rocm/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 3,
                  "snippet": {
                    "text": "RUN \\\ngit clone https://github.com/Lightning-AI/lightning.git && \\\ngit clone https://github.com/pallets/click.git && \\\ncd click && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "63ec5448d9ef6cbd3ebb8805e3f757cbc7697d5e5af29faae38ce4d1c9020e5edb4b1b943ca882a2370edadf5a134b21107dd3da4948c286cebc380fc49e1405_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d4c66698-0ff5-3676-bb09-ec89fa2ee8cd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/ipu-ci-runner/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 22,
                  "snippet": {
                    "text": "FROM pytorchlightning/pytorch_lightning:base-ipu-py${PYTHON_VERSION}-torch${PYTORCH_VERSION}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2442cf0fbe68919b6317ceb0120803941056061c29734cde11a4c0458f0bc9404e7cf62df7b35f2ac9aa1def9c34852eae8a22ea1cf2a8ee2a34f3985a7642ab_0"
          },
          "properties": {}
        },
        {
          "ruleId": "84b3a775-5cda-3144-9a3d-b16e37424964",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/nvidia/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 10,
                  "snippet": {
                    "text": "FROM nvcr.io/nvidia/pytorch:${PYTORCH_VERSION}-py3"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "661b705200cb64fc41f4a204767474b829256103717a52c1f77081c2e2ff9fdb3737e9f16df2d1bbe27c8d400563ae3462d041112b5ac16f0b70cc85d40091c9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cdb3ad91-ccda-3c36-a14b-9745a23f78cb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/nvidia/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN \\\n    cd /workspace  && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d470582f2f2bd2b5a513c24f0330dc44962c1b31bd8dfcbb869737b6f580cc9d972a95127b546dc0d52d457eb63803a66352ea41dcfc20a941d16de1c5dbd2e0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4c702646-d40c-3dc3-8087-4c98af625cc0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/nvidia/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 68,
                  "endColumn": 91,
                  "snippet": {
                    "text": "CMD [\"jupyter\", \"notebook\", \"--port=8888\", \"--no-browser\", \"--ip=0.0.0.0\", \"--allow-root\"]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bc412deb94b72c4c9b83d57036e1e131c0c5ce7383f0fef18f2b1bfed2532e70a965cd90ef13b937fd183a3fceef0ceedfc53b18e5ea3059ae046d734955469c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d8f03f8a-4358-3439-9aba-5644f9e329b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/release/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN \\\n    cd /home && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "eeb6d2e007e8c20ebc611dcaecd63377a109818ccd68bd6e4104997721866adb76177fd6e088a0e922348c8b30626a022e86ce5a535f0a93b83ce19155b0a4ff_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2c74793b-1ef8-357c-a5e2-395e573fce62",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/release/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 2,
                  "endLine": 18,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#FROM pytorchlightning/pytorch_lightning:base-cuda-py${PYTHON_VERSION}-torch${PYTORCH_VERSION}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f0020d78e342d006840c7b2cf5bded0810b8a891dc15b14605210b7902f552a53b2451749fc8c744f0f40d0551b5edcf90c4ef01f0314146a66981bb6fde0c9e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "de80ecb1-7788-379a-b905-8852a3dfe5f2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By not specifying a USER, a programs in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/release/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 3,
                  "endLine": 53,
                  "endColumn": 20,
                  "snippet": {
                    "text": "# CMD [\"/bin/bash\"]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6c03eed61138d040139b0bd8e04640ce15b0d02e2273fa7cbf2ec8ec044ca34f04a67a334f214697fdd1cf621c33176726a55401ea2ad8072da4d8fda9865a5d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ada4c327-53a6-3317-aed5-c3166623048e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/tpu-tests/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 22,
                  "snippet": {
                    "text": "FROM pytorchlightning/pytorch_lightning:base-xla-py${PYTHON_VERSION}-torch${PYTORCH_VERSION}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9e8fa52ef51d03561494f315c48b746beee4756ffd43911bb3d0d4491c330589ecf7727ade0958c72501c6f5dd4c143d0c28cafbe7ebd768191b29f43b784f36_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ec39366e-85f9-3cc9-8a8f-93cfa9e3c634",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "legacy/simple_classif_training.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 16,
                  "endLine": 70,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        return DataLoader(\n            SklearnDataset(self.x_train, self.y_train, self._x_type, self._y_type),\n            shuffle=True,\n            batch_size=self.batch_size,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1a351b0e38575beafc5de3b3eebbc64f212d3fa0fbc72d57886440702ed60064f5acf5cca690e810e1e6c572be3d26fcf232aaef1451666e51f867a9e750a845_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b1d4bd4e-2a68-3b15-9b07-e6dc68b43229",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockers/tpu-tests/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd pytorch-lightning && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "321dad20edcf4d10072a00fa6c2cd5b9950097796f1112effd677603a12a330e9240a8a5d89263f7e544e31ba4cfba2789455aa50beb8410a68ce093c133d51d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "007669cf-ec5f-301e-9073-765b18d927d8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "legacy/simple_classif_training.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 16,
                  "endLine": 75,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        return DataLoader(\n            SklearnDataset(self.x_valid, self.y_valid, self._x_type, self._y_type), batch_size=self.batch_size\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1a351b0e38575beafc5de3b3eebbc64f212d3fa0fbc72d57886440702ed60064f5acf5cca690e810e1e6c572be3d26fcf232aaef1451666e51f867a9e750a845_1"
          },
          "properties": {}
        },
        {
          "ruleId": "fc10b302-8f78-371b-b0fa-51fd602cc2d9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "legacy/simple_classif_training.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 16,
                  "endLine": 80,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        return DataLoader(\n            SklearnDataset(self.x_test, self.y_test, self._x_type, self._y_type), batch_size=self.batch_size\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1a351b0e38575beafc5de3b3eebbc64f212d3fa0fbc72d57886440702ed60064f5acf5cca690e810e1e6c572be3d26fcf232aaef1451666e51f867a9e750a845_2"
          },
          "properties": {}
        },
        {
          "ruleId": "030d22ad-dee7-3a01-bbf4-3395b96f38c1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/autoencoder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 31,
                  "endLine": 92,
                  "endColumn": 100,
                  "snippet": {
                    "text": "        images, _ = next(iter(DataLoader(trainer.datamodule.mnist_val, batch_size=self.num_samples)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cef7dd4218d920f3d9cbb8f5a8ea4b880d17e1a9c426d68be2e41bf83987e65b455ad459c6a8323a9fe6a84fd2caeff6c633392503adbca3947ea14f1874ea59_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d32df884-9db9-30f1-b63b-3736fa936a63",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/autoencoder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 16,
                  "endLine": 162,
                  "endColumn": 72,
                  "snippet": {
                    "text": "        return DataLoader(self.mnist_train, batch_size=self.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cef7dd4218d920f3d9cbb8f5a8ea4b880d17e1a9c426d68be2e41bf83987e65b455ad459c6a8323a9fe6a84fd2caeff6c633392503adbca3947ea14f1874ea59_1"
          },
          "properties": {}
        },
        {
          "ruleId": "5bf0b2ec-94a6-3634-aa00-382a49b69750",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/autoencoder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 16,
                  "endLine": 165,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        return DataLoader(self.mnist_val, batch_size=self.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cef7dd4218d920f3d9cbb8f5a8ea4b880d17e1a9c426d68be2e41bf83987e65b455ad459c6a8323a9fe6a84fd2caeff6c633392503adbca3947ea14f1874ea59_2"
          },
          "properties": {}
        },
        {
          "ruleId": "6d0136a6-b931-3bd9-8008-c1f1637032c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/autoencoder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 16,
                  "endLine": 168,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        return DataLoader(self.mnist_test, batch_size=self.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cef7dd4218d920f3d9cbb8f5a8ea4b880d17e1a9c426d68be2e41bf83987e65b455ad459c6a8323a9fe6a84fd2caeff6c633392503adbca3947ea14f1874ea59_3"
          },
          "properties": {}
        },
        {
          "ruleId": "f9e473e3-2ad2-351c-932a-dac16a1295a0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/autoencoder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 16,
                  "endLine": 171,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        return DataLoader(self.mnist_test, batch_size=self.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cef7dd4218d920f3d9cbb8f5a8ea4b880d17e1a9c426d68be2e41bf83987e65b455ad459c6a8323a9fe6a84fd2caeff6c633392503adbca3947ea14f1874ea59_4"
          },
          "properties": {}
        },
        {
          "ruleId": "029bbd1b-7cfe-3041-b103-85a474f78978",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/backbone_image_classifier.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 16,
                  "endLine": 112,
                  "endColumn": 72,
                  "snippet": {
                    "text": "        return DataLoader(self.mnist_train, batch_size=self.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7e4359dadd491f43c3430cc40fc6197893edc7f06fde5e723377ac9b51893caaf1da5a00f1732f19e0ec93627a10f171b260fe49b203603931774ce37dfeb5d9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "62da2975-529d-33be-aa45-27492246feb2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/backbone_image_classifier.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 16,
                  "endLine": 115,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        return DataLoader(self.mnist_val, batch_size=self.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7e4359dadd491f43c3430cc40fc6197893edc7f06fde5e723377ac9b51893caaf1da5a00f1732f19e0ec93627a10f171b260fe49b203603931774ce37dfeb5d9_1"
          },
          "properties": {}
        },
        {
          "ruleId": "91f1c427-3bc9-3c8b-ad78-495b107f561f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/backbone_image_classifier.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 16,
                  "endLine": 118,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        return DataLoader(self.mnist_test, batch_size=self.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7e4359dadd491f43c3430cc40fc6197893edc7f06fde5e723377ac9b51893caaf1da5a00f1732f19e0ec93627a10f171b260fe49b203603931774ce37dfeb5d9_2"
          },
          "properties": {}
        },
        {
          "ruleId": "348a56d6-7ebd-3169-8eb1-3b3e1092896d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/backbone_image_classifier.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 16,
                  "endLine": 121,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        return DataLoader(self.mnist_test, batch_size=self.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7e4359dadd491f43c3430cc40fc6197893edc7f06fde5e723377ac9b51893caaf1da5a00f1732f19e0ec93627a10f171b260fe49b203603931774ce37dfeb5d9_3"
          },
          "properties": {}
        },
        {
          "ruleId": "e6634c58-f99a-37f3-8eb7-dfb717e80dae",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_datamodule.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 13,
                  "endLine": 97,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            urllib.request.urlretrieve(url, fpath)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bedd4a4ea717ba5a419b071fb1700b84b1f24a4f89d936f2ebbe8941d4f6507a3c98c93a9c6151b960717ee60f7ed7a0bd56b8d22cafb6f9d3918ffac7f678b7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "664a8fb3-0fad-3ad8-ad20-b417e8bb81f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_datamodule.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 23,
                  "endLine": 107,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                res = torch.load(path_data)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8b2dfdd490d5f295b7b481b40a75b4bb37f20e42672a1f5c227d9afd1e3a3d1604fe5411a7968cc1ad7bc601757a6495010ba4d61e535ef5cc8c8c90392aa061_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cf5cefb3-e666-31a0-83e8-933324cf7845",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_1_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 20,
                  "endLine": 68,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    train_loader = torch.utils.data.DataLoader(\n        train_dataset,\n        batch_size=hparams.batch_size,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a19ef7b9582d91a739ec34f1cfffdd664895f7706f631d1a08b623bcf5239ae1a52e8f9cdb3d50e945920bd6f7d8753373cda8fa56f57c3fba0f4e2f86f52ed0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ef1f2de3-9a7c-3ac3-b7a1-2fbb0ccf6e22",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_1_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 19,
                  "endLine": 69,
                  "endColumn": 91,
                  "snippet": {
                    "text": "    test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=hparams.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a19ef7b9582d91a739ec34f1cfffdd664895f7706f631d1a08b623bcf5239ae1a52e8f9cdb3d50e945920bd6f7d8753373cda8fa56f57c3fba0f4e2f86f52ed0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "fb418121-881e-3bc3-a1f6-6ab40119fe60",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_2_lite.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 24,
                  "endLine": 61,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        train_loader = torch.utils.data.DataLoader(\n            train_dataset,\n            batch_size=hparams.batch_size,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "419daa24c3566cfc3a3ff8a4ac589512146ec87fcbc6da847e1fd97e4a376b13a1d804095d749ca0b8ca8b08c72fd18bedae92efd58434602960295c93ad46c5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d90f4b9f-334a-3fcb-9ba1-08f6a0a533d6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_2_lite.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 23,
                  "endLine": 62,
                  "endColumn": 95,
                  "snippet": {
                    "text": "        test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=hparams.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "419daa24c3566cfc3a3ff8a4ac589512146ec87fcbc6da847e1fd97e4a376b13a1d804095d749ca0b8ca8b08c72fd18bedae92efd58434602960295c93ad46c5_1"
          },
          "properties": {}
        },
        {
          "ruleId": "95221f90-9765-3f73-a0f1-cb9f94661f4b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_3_lite_to_lightning_module.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 16,
                  "endLine": 142,
                  "endColumn": 94,
                  "snippet": {
                    "text": "        return torch.utils.data.DataLoader(train_dataset, batch_size=self.hparams.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "04d5f7571c83b2bd3c98dc3b61e1bb634a7af6b5e878c8cf14db47016bbb11d3dbb435ba3aa486237775ac8efa038b863bc913204f13d5203bb8d4f68d1df738_0"
          },
          "properties": {}
        },
        {
          "ruleId": "15eb25c8-0fd0-3da6-8b7e-d354ee46cdc3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_3_lite_to_lightning_module.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 16,
                  "endLine": 146,
                  "endColumn": 93,
                  "snippet": {
                    "text": "        return torch.utils.data.DataLoader(test_dataset, batch_size=self.hparams.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "04d5f7571c83b2bd3c98dc3b61e1bb634a7af6b5e878c8cf14db47016bbb11d3dbb435ba3aa486237775ac8efa038b863bc913204f13d5203bb8d4f68d1df738_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c1835137-1838-3f25-a822-0f3c8abacda5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_4_lightning_module.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 16,
                  "endLine": 69,
                  "endColumn": 94,
                  "snippet": {
                    "text": "        return torch.utils.data.DataLoader(train_dataset, batch_size=self.hparams.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7d38ccc437bf6786b530393cb8389238bee9247a24df093c82c33d4fcfa85a7ba56ca6a2ce3df928c7e16f0c92840ad524306cf91e4cfdd2440019a140af6fcb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a86d7a6d-6a1c-3d79-be9c-95d6da3023ee",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_4_lightning_module.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 16,
                  "endLine": 73,
                  "endColumn": 93,
                  "snippet": {
                    "text": "        return torch.utils.data.DataLoader(test_dataset, batch_size=self.hparams.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7d38ccc437bf6786b530393cb8389238bee9247a24df093c82c33d4fcfa85a7ba56ca6a2ce3df928c7e16f0c92840ad524306cf91e4cfdd2440019a140af6fcb_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9acd8845-0274-33d1-90bf-99232e0702c4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_5_lightning_datamodule.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 16,
                  "endLine": 73,
                  "endColumn": 94,
                  "snippet": {
                    "text": "        return torch.utils.data.DataLoader(train_dataset, batch_size=self.hparams.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "54d3038fa906bf26c0cb8a891d3fa6b218fca7d4c94c2dbe3cb080004a08ae426c289f2e6683b2adbe818a799aa91c66566164362123009824fabc8c569cadc0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f0e5d174-1d86-37c6-a3d9-606175d44056",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/mnist_examples/image_classifier_5_lightning_datamodule.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 16,
                  "endLine": 77,
                  "endColumn": 93,
                  "snippet": {
                    "text": "        return torch.utils.data.DataLoader(test_dataset, batch_size=self.hparams.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "54d3038fa906bf26c0cb8a891d3fa6b218fca7d4c94c2dbe3cb080004a08ae426c289f2e6683b2adbe818a799aa91c66566164362123009824fabc8c569cadc0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "7ce89cdb-ea5c-3aee-b61d-0787f4353dda",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/profiler_example.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 16,
                  "endLine": 99,
                  "endColumn": 96,
                  "snippet": {
                    "text": "        return torch.utils.data.DataLoader(trainset, batch_size=2, shuffle=True, num_workers=0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3e7b12c9f4018d5a73c971fbd3df91f9fb9bcf3d06ef620fc1b8fb32512b90842b3afcde26e6c0cffb1b94759d1462704b0fa83fa2504f271cb07dc0471af8c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c7aadf68-e773-3ca3-baf0-b71c51d55ff9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/basic_examples/profiler_example.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 16,
                  "endLine": 103,
                  "endColumn": 94,
                  "snippet": {
                    "text": "        return torch.utils.data.DataLoader(valset, batch_size=2, shuffle=True, num_workers=0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3e7b12c9f4018d5a73c971fbd3df91f9fb9bcf3d06ef620fc1b8fb32512b90842b3afcde26e6c0cffb1b94759d1462704b0fa83fa2504f271cb07dc0471af8c_1"
          },
          "properties": {}
        },
        {
          "ruleId": "96216313-ab2b-3f5c-9413-eadfed512a82",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/bug_report/bug_report_model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 18,
                  "endLine": 47,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    train_data = DataLoader(RandomDataset(32, 64), batch_size=2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c9158b25f67251c5f888b42de2be626957b554272454e4199f2690f27ae3c644be5408f4f9386f22487c87bf4f04d771eba9f285d41889d31c6ce9fc14bff253_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8bd1e751-9494-30e3-a900-ad94dc8193fb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/bug_report/bug_report_model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    test_data = DataLoader(RandomDataset(32, 64), batch_size=2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c9158b25f67251c5f888b42de2be626957b554272454e4199f2690f27ae3c644be5408f4f9386f22487c87bf4f04d771eba9f285d41889d31c6ce9fc14bff253_2"
          },
          "properties": {}
        },
        {
          "ruleId": "fa3395a3-347e-37ac-a647-9e8552520609",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/domain_templates/computer_vision_fine_tuning.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 16,
                  "endLine": 144,
                  "endColumn": 118,
                  "snippet": {
                    "text": "        return DataLoader(dataset=dataset, batch_size=self._batch_size, num_workers=self._num_workers, shuffle=train)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6016ebedd556aaf1fa4d9ea6fcd4e53e5faafbef8eb1a2f06616906719133ff4a01811f8157c1a148da7e2f88fd8d6523a0fe1777b7f59f49954f88d6e9e7893_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a605370c-984c-3243-9d1c-3de93c0c0934",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/domain_templates/generative_adversarial_net.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 54,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            return layers"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0f3a3ee0d33ad2788870394fa4b2461b0f2d2195efe28f3e9d8a03bcb381e6f6939a96988aac11c2ce1467c403fbb468aa3450dca3024448404e1d4f0b8244f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e7add9c0-a596-3ae5-8089-0255aaf1ab6a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `Generator` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/domain_templates/generative_adversarial_net.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 33,
                  "endLine": 61,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            nn.Linear(1024, int(np.prod(img_shape))),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fd85cffc2598bd6622f87e22fcd0be0f7c49857615fc9950162f218140ab22886493a95cf4e37248ebbcf2c498d2e6cea95f993e83f9428ac3ae53e7a0e164f1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5a8cbfc4-6fc9-3f42-9f0e-cd8f89508099",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `Discriminator` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/domain_templates/generative_adversarial_net.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 27,
                  "endLine": 83,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            nn.Linear(int(np.prod(img_shape)), 512),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3d47ce509bc2d47a9d646915fc266b32dbe63d975dc98b3d4438b62fd53aa6d283c767e322edbaf9f81db083312d8c80cd6ecbab7761c3b4e39b2a211c0ba3aa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1ba6e005-3cc3-39ca-a1c4-95f7077697f1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/domain_templates/reinforce_learn_Qnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 22,
                  "endLine": 358,
                  "endColumn": 91,
                  "snippet": {
                    "text": "        dataloader = DataLoader(dataset=dataset, batch_size=self.batch_size, sampler=None)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b2034a04907642ff98fed858e88d2ec431f6feab48b07d88a66a795f9e0ddc6fadbb4c018554c1840e943f17824c0e670bfe379fb130dd1dcd73ed7498c76081_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0d537aa1-e456-34c3-b41a-b6319cdb3cd9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/domain_templates/reinforce_learn_ppo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 22,
                  "endLine": 426,
                  "endColumn": 77,
                  "snippet": {
                    "text": "        dataloader = DataLoader(dataset=dataset, batch_size=self.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef1604d9dd42f2f38e4e9631e7c32c2daa3e7c282b82e99c7e202d77c5ea966168793d48e35138627986b70a528c2c86132729506fd293f3810515e5a49e5a62_0"
          },
          "properties": {}
        },
        {
          "ruleId": "195bcd1c-9a3d-3c0c-8e0e-ebf31bd576fa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/domain_templates/semantic_segmentation.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 16,
                  "endLine": 242,
                  "endColumn": 83,
                  "snippet": {
                    "text": "        return DataLoader(self.trainset, batch_size=self.batch_size, shuffle=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7193debbe433e207f8924bba235d37894a8319728a88405289acd3f14312b82ce2745f8c25e196c3075974c00ff235bac9eba539bed1c4fdd47e118877cf8ef5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "222577c5-89dc-3d68-8acc-83fb1ff8b0e0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/domain_templates/semantic_segmentation.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 16,
                  "endLine": 245,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        return DataLoader(self.validset, batch_size=self.batch_size, shuffle=False)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7193debbe433e207f8924bba235d37894a8319728a88405289acd3f14312b82ce2745f8c25e196c3075974c00ff235bac9eba539bed1c4fdd47e118877cf8ef5_1"
          },
          "properties": {}
        },
        {
          "ruleId": "bc14ff57-6a25-39b3-96fa-75482379a52c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/fault_tolerant/automatic.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 17,
                  "endLine": 87,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e62e6cb746e659c33306cdb06d908d8a0ca0de9cc85101e84aedd205032142a0eaaba265f04b97bfa75d3264c414747a4f592fa23cdd219195acadb3552c447e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "be919ed7-a6e0-3920-8edc-75367a54e473",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/fault_tolerant/automatic.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 16,
                  "endLine": 97,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        return DataLoader(RandomGetItemDataset(3, 1))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8e42932762bff9286dc3d3ef17b9ab44bf320d3bab38645fbd697c1ee15f6e8abcfa62ad96faf030610f7a11125ee111cf1bd322341092d4aa2deb32e2a05c4e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ee0d3b2f-d99b-362a-9668-ec8c05b561de",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/loop_examples/mnist_lite.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 24,
                  "endLine": 146,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        train_loader = torch.utils.data.DataLoader(train_dataset, hparams.batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "94f7090b84d246a218e6ccd295b01b195475a5fd2691320766646ebc5db6547a112a78f39094777d59e552cbba1a3e3fb1583f3506e9f706fd6107e9fea40d4b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6dbc5473-6049-35a0-b650-5bdd29816f0b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pl_examples/loop_examples/mnist_lite.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 23,
                  "endLine": 147,
                  "endColumn": 89,
                  "snippet": {
                    "text": "        test_loader = torch.utils.data.DataLoader(test_dataset, hparams.test_batch_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "94f7090b84d246a218e6ccd295b01b195475a5fd2691320766646ebc5db6547a112a78f39094777d59e552cbba1a3e3fb1583f3506e9f706fd6107e9fea40d4b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9ef953c6-ac3f-3263-bd5b-3c83142c242a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/accelerators/gpu.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 14,
                  "endLine": 138,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    result = subprocess.run(\n        [nvidia_smi_path, f\"--query-gpu={gpu_query}\", \"--format=csv,nounits,noheader\", f\"--id={gpu_id}\"],\n        encoding=\"utf-8\",\n        capture_output=True,\n        check=True,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7e83b88e0494c24767da3ce1d5b7cec853d087cc29cfe3cca3cb4b9cd7307d6727ec6026702b59dcb45f15c2498592b5dbafa35f77543026f337435529869273_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7d7caee3-8cc2-3d49-a995-ae3bd818bb12",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/accelerators/registry.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 14,
                  "endLine": 119,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    module = importlib.import_module(base_module)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bc0ce127a146ff964357b21bed1067057af0538632793fc5b0fd1da3467b666570ecacd192e44d5c13e4246d3d42c083af8999699303b020ebb228fa6656dc65_0"
          },
          "properties": {}
        },
        {
          "ruleId": "612cc23a-c0fc-33f8-a080-72aa6dece707",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"(\\{.*?)[:\\}]\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/callbacks/model_checkpoint.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 18,
                  "endLine": 512,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        groups = re.findall(r\"(\\{.*?)[:\\}]\", filename)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "50a02b32e9ecb59876ff9be071270f657eb1e0a5115d897b814d228a895e977b48f60b510139d975d96b4b2538108da3b4fdd68096b6ee9a7a5895c402c500a4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "578030f1-93ad-3023-b88e-ac220c39fa73",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/demos/boring_classes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 16,
                  "endLine": 136,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        return DataLoader(RandomDataset(32, 64))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9521e7490d47169f4c19da0dcecba05632a9a43be6a46246aaf91cc49baf19d682308a8bbe2eb8e50e3f716743dc44ea4ac8c217627dbc8a886a1fdc3991551a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a92566b9-efcf-3f7d-a22e-9582fd59f47c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/demos/boring_classes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 16,
                  "endLine": 139,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        return DataLoader(RandomDataset(32, 64))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9521e7490d47169f4c19da0dcecba05632a9a43be6a46246aaf91cc49baf19d682308a8bbe2eb8e50e3f716743dc44ea4ac8c217627dbc8a886a1fdc3991551a_1"
          },
          "properties": {}
        },
        {
          "ruleId": "780802a9-2b91-303b-af0b-c82d0c15cd9e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/demos/boring_classes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 16,
                  "endLine": 142,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        return DataLoader(RandomDataset(32, 64))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9521e7490d47169f4c19da0dcecba05632a9a43be6a46246aaf91cc49baf19d682308a8bbe2eb8e50e3f716743dc44ea4ac8c217627dbc8a886a1fdc3991551a_2"
          },
          "properties": {}
        },
        {
          "ruleId": "05122bab-9ec4-3167-8e7c-179f69eec547",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/demos/boring_classes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 16,
                  "endLine": 145,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        return DataLoader(RandomDataset(32, 64))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9521e7490d47169f4c19da0dcecba05632a9a43be6a46246aaf91cc49baf19d682308a8bbe2eb8e50e3f716743dc44ea4ac8c217627dbc8a886a1fdc3991551a_3"
          },
          "properties": {}
        },
        {
          "ruleId": "afbffd93-7e51-3776-870a-511e827d3375",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/demos/boring_classes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 16,
                  "endLine": 170,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        return DataLoader(self.random_train)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9521e7490d47169f4c19da0dcecba05632a9a43be6a46246aaf91cc49baf19d682308a8bbe2eb8e50e3f716743dc44ea4ac8c217627dbc8a886a1fdc3991551a_4"
          },
          "properties": {}
        },
        {
          "ruleId": "7783c13f-9dfa-3085-a3d6-c500c8ac76c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/demos/boring_classes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 16,
                  "endLine": 176,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        return DataLoader(self.random_test)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9521e7490d47169f4c19da0dcecba05632a9a43be6a46246aaf91cc49baf19d682308a8bbe2eb8e50e3f716743dc44ea4ac8c217627dbc8a886a1fdc3991551a_6"
          },
          "properties": {}
        },
        {
          "ruleId": "9836685b-57f2-3c73-82d6-66622739100e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/demos/boring_classes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 16,
                  "endLine": 179,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        return DataLoader(self.random_predict)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9521e7490d47169f4c19da0dcecba05632a9a43be6a46246aaf91cc49baf19d682308a8bbe2eb8e50e3f716743dc44ea4ac8c217627dbc8a886a1fdc3991551a_7"
          },
          "properties": {}
        },
        {
          "ruleId": "18fdc126-cf0a-3d46-a2da-b9d14981c43f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/demos/boring_classes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 16,
                  "endLine": 173,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        return DataLoader(self.random_val)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9521e7490d47169f4c19da0dcecba05632a9a43be6a46246aaf91cc49baf19d682308a8bbe2eb8e50e3f716743dc44ea4ac8c217627dbc8a886a1fdc3991551a_5"
          },
          "properties": {}
        },
        {
          "ruleId": "a8fe89de-6eea-3429-a2b0-b4567d8a2b63",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found identical comparison using is. Ensure this is what you intended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/loggers/comet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 12,
                  "endLine": 147,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        if comet_ml is None:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "51c6264703cca79a30b5d14cf5e52ac1367e2203312d53a63dbc134c4ef4777215f5915f7c25a2f642c46de9e71e36bcc88648d65dfcd7c015d2491541c6ab41_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a2c46d98-2ce6-31da-94d0-6519f27be587",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"[^a-zA-Z0-9_/. -]+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/loggers/mlflow.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 21,
                  "endLine": 234,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            new_k = re.sub(\"[^a-zA-Z0-9_/. -]+\", \"\", k)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5b50cb2ed76c766e0ed09a7eeabdcc3bd0938b9f221d07d35c16a7eb4a59e3201d8ecee8bd099fa55b494130ef170d67a62ec91e6024fc752f480f32a2ee4d6a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d309a958-73c4-31bc-8e20-9169d0d8e4a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"[^0-9]\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/plugins/environments/slurm_environment.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 22,
                  "endLine": 131,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            number = re.sub(\"[^0-9]\", \"\", number)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fa031babcfaf3a820e1897aced5f8aeca08eb5513b4557215c8d8a0f522a83a743aac6750ed2866e3c1c48a5f84dd0e79b9b4d7b4ecbe179767a05463ab71744_0"
          },
          "properties": {}
        },
        {
          "ruleId": "71e98af5-98cb-3aee-9388-95b038e10ad6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/plugins/environments/lightning_environment.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 5,
                  "endLine": 98,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind((\"\", 0))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "541a14b55cd362c532a9be727dcd0a2b09229c20bb9551f379788abef62a91346f3b8137b1eacf180efce39870fbdff145bcd99a4542dffa9abb897ce7282fcc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "faf69baf-46c3-3457-a971-97447d21d28c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\",? *<=? *[\\d\\.\\*]+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/setup_tools.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 19,
                  "endLine": 44,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            req = re.sub(r\",? *<=? *[\\d\\.\\*]+\", \"\", req).strip()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "518255cb2d6557095acaa0d9e8d5026cc91dfc8f3305a609673af4b87a79587e80b42687c2a8afbaff2578e48611516db53c294651ef771b34c7dd989d6929df_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fc0da719-01a5-3778-a798-de4d08666671",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\?definitionId=\\d+&branchName=master\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/setup_tools.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 12,
                  "endLine": 76,
                  "endColumn": 120,
                  "snippet": {
                    "text": "    text = re.sub(r\"\\?definitionId=\\d+&branchName=master\", f\"?definitionId=2&branchName=refs%2Ftags%2F{version}\", text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ab9705cdb74afdef9f0436b216ba73f3fa68474607b71d5f5ac8c1b24d0c07d4987cc853e6f9238d95c2d905ca49c3d4eabb2a0b38b20071b25462f22477dafd_0"
          },
          "properties": {}
        },
        {
          "ruleId": "577635da-1736-3c58-8df2-217260878ea8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rf\"{skip_begin}.+?{skip_end}\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/setup_tools.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 12,
                  "endLine": 81,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    text = re.sub(rf\"{skip_begin}.+?{skip_end}\", \"<!--  -->\", text, flags=re.IGNORECASE + re.DOTALL)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a062eb42a3277eec8a148a743ab72feedabf9d5a2ba05dd9c2d52ffe8d831325397692723c4bdeb61f126382726e8e89bfe2bb3529f7b38a83f8f6ffd53582a9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "28532170-e50f-3d3d-a843-b50d2c43cbc5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/strategies/collaborative.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 17,
                  "endLine": 459,
                  "endColumn": 62,
                  "snippet": {
                    "text": "            p = re.compile(r\"[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "34bf586d87ac168bb6f71b4f7e8a5a4e20d349051baaff687ac12b6ec87610a6e1dd46f14aa1150e18a5b0b4817b2c7353f3e551b7bcb4bc4e5064982a33c987_0"
          },
          "properties": {}
        },
        {
          "ruleId": "af12f478-9ef4-339b-98b3-3a9c055e86e3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/strategies/collaborative.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 17,
                  "endLine": 499,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                time.sleep(retry_peer_sleep_duration)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4260e77d6ce0442039abff03653b922097f1fa41993aa35d3e36682f85b8395f90019caa90e55288f735ffb99fed6993c80e804d16208b754888c7918c0602bc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e51ee14a-272f-3dce-bf6f-72da32150b74",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/strategies/ddp.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 9,
                  "endLine": 429,
                  "endColumn": 75,
                  "snippet": {
                    "text": "        torch.save(True, os.path.join(sync_dir, f\"{self.global_rank}.pl\"))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2af5aa17f1ab7fb68cd947651755b2896bf37a71086f24efd5aa8a5fdb2dbf140a68881eb5076b48e27eab38e52ddd8a8dacb2ce55c80a4f297460026e2a8ca_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4404502e-5575-3692-94d4-badbfd53ad77",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/strategies/ddp.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 9,
                  "endLine": 432,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff2eda18b5427e5a4a883270d19c60ad2d1ce8843e97b15b3929bb7787e0d2e856d41a8cfac5d42cd48d77694b2f99e909f54520d5b81cfb117c7f7f1f220842_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3cb668b4-68f8-3b0e-ae16-894b23b6597e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/strategies/launchers/subprocess_script.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 13,
                  "endLine": 145,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            subprocess.Popen(command, env=env_copy, cwd=cwd)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3ba105603c5a25b901978b273e2dbb1caf6c896c8f85d4cc1999428885630b795b87ca9c9957e8222c6bf24a9b3178e89782fdc3b801a9295274994e267cc695_0"
          },
          "properties": {}
        },
        {
          "ruleId": "54676d23-f083-3f9f-abaa-54fb5a4a881a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/strategies/launchers/xla_spawn.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2eb4589237e17c3fc64398a59bcdf545add2949cb9f9812a0de85619ff85d24ad4f3252d4f0ab1d1582845f5c929e9a759733d934208f2084f04093e6df3feb2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f7d4e4d4-9a8a-375d-82f1-ab9f594dc55e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/strategies/strategy_registry.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 14,
                  "endLine": 119,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    module = importlib.import_module(base_module)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "33e241c7a979d33c33894d8eae7cf65400cce974da3d8f9cb486c786862f2ddca48b89f1634154058a3b2aa080ad0fe6fd49fcb6834f424224b6633653c004de_0"
          },
          "properties": {}
        },
        {
          "ruleId": "082b4ba9-d778-34a3-ac5d-33ebc793d6f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/strategies/tpu_spawn.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 9,
                  "endLine": 185,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        torch.save(obj, buffer)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b63fffa5d6bfbce5302c3f23f26b43b7478b919d24e6cdbc8d0bdce369455a403a3077622c21ef2d13846e3fba9e7687e61253c242390b033c675e54f7f910b5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "645abee3-f9b2-3e72-ac8d-e5468067f19a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/strategies/tpu_spawn.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 15,
                  "endLine": 190,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        obj = torch.load(buffer)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b63fffa5d6bfbce5302c3f23f26b43b7478b919d24e6cdbc8d0bdce369455a403a3077622c21ef2d13846e3fba9e7687e61253c242390b033c675e54f7f910b5_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d76eaa0b-e88f-313b-b6b7-e5b6d2851e40",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"[^0-9]\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/trainer/connectors/checkpoint_connector.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 20,
                  "endLine": 505,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            name = re.sub(\"[^0-9]\", \"\", name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a258ef3969f3649afc579e53771e9ed3341a11740f7b5fdc85d5908aba0a66d2e9eee08dfa0d4fea712c2c427658174ebd83f927df4cf42e494844f476134d6c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "daebba3f-b0ec-3ad1-95ba-c9cce1a2aae1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/trainer/connectors/signal_connector.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 26,
                  "endLine": 83,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                result = call(cmd)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "01454f65346fd1113f7d905a490dbf862f8020bf1cd74dbe76d309f89ae2afb8d97f63e2c1016f31ce48df1714013ad5946aa850e747c532aa5a3e2d8060f61c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "115dffc9-1e2c-322c-97e5-f913eeffd607",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/trainer/progress.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 52,
                  "endLine": 236,
                  "endColumn": 97,
                  "snippet": {
                    "text": "    step: Progress = field(default_factory=lambda: Progress.from_defaults(ReadyCompletedTracker))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b58413c1716a0c308fc404bedbf1b1f259e85d0f1b6c265c613fa16d0aa501dff58f398e7f1461a018b1847b67ee579acfe0f5af9afa852915d42518cb94a29_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0ffed012-fa89-3ac4-9b10-23ecd18728e2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/trainer/progress.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 57,
                  "endLine": 237,
                  "endColumn": 95,
                  "snippet": {
                    "text": "    zero_grad: Progress = field(default_factory=lambda: Progress.from_defaults(StartedTracker))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b58413c1716a0c308fc404bedbf1b1f259e85d0f1b6c265c613fa16d0aa501dff58f398e7f1461a018b1847b67ee579acfe0f5af9afa852915d42518cb94a29_1"
          },
          "properties": {}
        },
        {
          "ruleId": "43c6995f-da59-312a-ac38-45eeac2d0e45",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/trainer/supporters.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 67,
                  "endLine": 121,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    dataloaders: List[DataLoader] = field(default_factory=lambda: [])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d85335404db00fcd618bd0830ae3d8986d3c3fed5feaec603b7b12f55377b39ebfbe34dc200800bc6573dc7fa80ff2034a547e2040c8501d81df073f2ea6b1c8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "07561ada-30d3-393d-ad99-bac9631a7b4d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/trainer/supporters.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 67,
                  "endLine": 122,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    has_finished: Dict[int, bool] = field(default_factory=lambda: {})"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d85335404db00fcd618bd0830ae3d8986d3c3fed5feaec603b7b12f55377b39ebfbe34dc200800bc6573dc7fa80ff2034a547e2040c8501d81df073f2ea6b1c8_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e4483caf-6ba3-3e73-8ada-dfac23de2f70",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'dl' module may cause segmentation faults or other incorrect behavior"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/auto_restart.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 19,
                  "endLine": 437,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        dataset = dl.dataset"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e999156f2aac43c14d0300c3ee00514d274b70b511e725bf63985140015e7e0740303cda653e76ebc3b97fa8426e9ea9934b278e54972d46a944493813548652_0"
          },
          "properties": {}
        },
        {
          "ruleId": "009c2707-1e3c-30fe-b1b7-3006573c5a66",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'dl' module may cause segmentation faults or other incorrect behavior"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/auto_restart.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 33,
                  "endLine": 446,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                    num_workers=dl.num_workers,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9432830bab6a4929fe971123624accf51f0046e31d38f1abd96088e2c5327f9a0afb64efd6a209ab46658cea5eb1476c52b7cdb72c8ac1e923a42df84f70a135_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b422c54b-f0e6-34f3-a385-f2e35da0dbea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'dl' module may cause segmentation faults or other incorrect behavior"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/auto_restart.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 33,
                  "endLine": 458,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                    num_workers=dl.num_workers,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9432830bab6a4929fe971123624accf51f0046e31d38f1abd96088e2c5327f9a0afb64efd6a209ab46658cea5eb1476c52b7cdb72c8ac1e923a42df84f70a135_1"
          },
          "properties": {}
        },
        {
          "ruleId": "1741b9e4-ed48-303b-a141-ddf801c95ef4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/cloud_io.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 16,
                  "endLine": 42,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        return torch.load(path_or_url, map_location=map_location)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "eec4278cc96b4ee9423fac8d54d9f731e59d9629505ab94098836254f3b1dd20f3b0a5966ae3d6c8e10f9574520bbc42db6392ce16e97d0a7088a9cd2cb1c9e7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3634ad4d-4400-35d6-90e7-52478186cb01",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/cloud_io.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 16,
                  "endLine": 47,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        return torch.load(f, map_location=map_location)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "eec4278cc96b4ee9423fac8d54d9f731e59d9629505ab94098836254f3b1dd20f3b0a5966ae3d6c8e10f9574520bbc42db6392ce16e97d0a7088a9cd2cb1c9e7_1"
          },
          "properties": {}
        },
        {
          "ruleId": "dcb8fcfd-a2a2-36d2-af09-9fe3ac59c976",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/cloud_io.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 5,
                  "endLine": 67,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    torch.save(checkpoint, bytesbuffer)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "eec4278cc96b4ee9423fac8d54d9f731e59d9629505ab94098836254f3b1dd20f3b0a5966ae3d6c8e10f9574520bbc42db6392ce16e97d0a7088a9cd2cb1c9e7_2"
          },
          "properties": {}
        },
        {
          "ruleId": "79c4b449-0a34-3845-827d-58b85ec380bf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\".*__init__\\(\\) got multiple values .* '(\\w+)'\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/data.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 17,
                  "endLine": 190,
                  "endColumn": 83,
                  "snippet": {
                    "text": "        match = re.match(r\".*__init__\\(\\) got multiple values .* '(\\w+)'\", str(e))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7c2fffb598ccb850489641bc18c9fa1ac48ab760358ac98432b6aab2f232de6b04044c3e1230a182124f9a3fd0279d818bc12889827d3f44c0c31acb655100a0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e84840f8-f75d-36c4-8107-804f25d6f8a0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/deepspeed.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 19,
                  "endLine": 97,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    optim_state = torch.load(optim_files[0], map_location=CPU_DEVICE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5bfa5cbc026d7e9b74890133fdf0fbc0121b378025ff4a7b722ab3b80ab19e4c74c2f174fe8f20ebf4dc96825d2d654571f1a1023f569daf0b499eb9680c8e95_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9c314444-f6c0-3882-9b71-890b906e1d94",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/deepspeed.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 5,
                  "endLine": 108,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    torch.save(client_state, output_file)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5bfa5cbc026d7e9b74890133fdf0fbc0121b378025ff4a7b722ab3b80ab19e4c74c2f174fe8f20ebf4dc96825d2d654571f1a1023f569daf0b499eb9680c8e95_2"
          },
          "properties": {}
        },
        {
          "ruleId": "2caf9a9d-2760-3b0c-8ecb-715613a1f910",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/deepspeed.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 20,
                  "endLine": 100,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    client_state = torch.load(model_file, map_location=CPU_DEVICE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5bfa5cbc026d7e9b74890133fdf0fbc0121b378025ff4a7b722ab3b80ab19e4c74c2f174fe8f20ebf4dc96825d2d654571f1a1023f569daf0b499eb9680c8e95_1"
          },
          "properties": {}
        },
        {
          "ruleId": "58910806-ea78-3262-b06a-67f24e6a4b9a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function _profile_nothing. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/fetching.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 9,
                  "snippet": {
                    "text": "def _profile_nothing() -> None:\n    pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "10c1ef3c97e76e26612c38dff64626e99704252a7ba6620e4f593bd5091efe0125093df711f964f1feca0b8ab349fcb810834fcda2731466eabd076eb6f1475c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3b1336c6-da67-3231-92f5-021a4c3c9a44",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/imports.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 9,
                  "endLine": 56,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        importlib.import_module(module_path)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bf2fbdd8d174eb02e8f0c0b31075dd19cb934dcfc76864c5a1bb212cde1630fbb9ae839902559db3aa25f7e858ce325c74a3ca8c2e58c573bbe298a43ce35b15_0"
          },
          "properties": {}
        },
        {
          "ruleId": "35895350-70b1-3edc-9341-17baef583926",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/imports.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 15,
                  "endLine": 71,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        pkg = importlib.import_module(package)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8fba3655f758a4afdfd4aa030cdc1e1cdcf472fe36898f396d16ce5c5f558a24a071277687b36dd787f3610b1f23493a551c562c47a672fe196a905b7b0b6b1f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "01b458f6-2901-333a-ab66-c735bc128ce1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/memory.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 14,
                  "endLine": 123,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    result = subprocess.run(\n        [nvidia_smi_path, \"--query-gpu=memory.used\", \"--format=csv,nounits,noheader\"],\n        encoding=\"utf-8\",\n        capture_output=True,\n        check=True,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "328398c72ce772166856bd40f771fb568e235d0043aa8cb127bad375ff9fed230c7384ca6c16eca2a9a8b050a518395b17b418c348f8d06a14fbc43900525ba4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "534cf967-5f92-3dfb-a9e1-ed4973040667",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/meta.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 15,
                  "endLine": 299,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        mod = importlib.import_module(submodules[0])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "39955c59d52571d68a28e973d3ed5ade9a49febce8712b24ce2f8707ecc2a1c6a8102100d3b16ddacc3394974ddaaafe5875e5d176dbd1db329f6a72913d45df_0"
          },
          "properties": {}
        },
        {
          "ruleId": "986aca39-bc34-332a-944b-8ba9e01d7eb0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/parsing.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "endLine": 91,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        pickle.dumps(obj)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f1c942540b2e80a7849a20220f3e2856f32da6481b14008de13a63fd5b0958f4f2e2b0db0fbf6c7fabc12ef02ee0604acdddf5100e6eb7cf717d5e827c7e8671_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6de99c1f-01c5-393a-ab53-238aab6fa07b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/upgrade_checkpoint.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "endLine": 36,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    checkpoint = torch.load(filepath)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8679cf3c0ed89aecd86a202b6e8c2affee97f4d6b0b5c86dd33f9b6d67545e86fa90b5284771fe4d2730a3edfbd2d3902c5caa9e9964bde24cd67e60a57ed81c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "72478cd5-1ac7-3119-8371-83eea4b3c464",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pytorch_lightning/utilities/upgrade_checkpoint.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 5,
                  "endLine": 47,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    torch.save(checkpoint, filepath)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8679cf3c0ed89aecd86a202b6e8c2affee97f4d6b0b5c86dd33f9b6d67545e86fa90b5284771fe4d2730a3edfbd2d3902c5caa9e9964bde24cd67e60a57ed81c_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ca6aaa26-2386-375f-bdb5-4c933d45eb07",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"([\\.\\d]+)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements/adjust-versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 11,
                  "endLine": 23,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    ver = re.search(r\"([\\.\\d]+)\", ver).groups()[0]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b02cfada602d1b689623cf8b89aa66071fc670a90c6904c79eb9ac99f15d54c721804bb6b54a7a13bebd78b64c7fe3f0c8fe3c39d9e1d40bcb0c65b21ed7cd71_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e32d717a-4ee7-3063-899e-4513306d5605",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rf\"\\s*#.*{os.linesep}\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements/adjust-versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "endLine": 44,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    req = re.sub(rf\"\\s*#.*{os.linesep}\", os.linesep, req).strip()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2811c3171b81620ff5ff1ee3848bd913a4e6c7bd6132ce532bba31e94b55441b30f07b953fcaed2294c5470f892cb1061aeedf9c412dd0b81eab6a2ab0438241_0"
          },
          "properties": {}
        },
        {
          "ruleId": "de0c8fc0-e8a4-33aa-af46-6f3d432e8ae0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rf\"\\b{lib}(?!\\w).*\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements/adjust-versions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 15,
                  "endLine": 49,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        req = re.sub(rf\"\\b{lib}(?!\\w).*\", replace, req)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cf5a2e4a39cb08dd46a2152cb8f29e508719a897603325c3c3ed3a91ace7543d2d471bfa6b488f8063de13edfa1343f61dfb61af85558d1bb02c3e0e93d4f129_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}